import type { GenerateSWConfig } from "workbox-webpack-plugin";

export interface PluginOptions extends GenerateSWConfig {
  /**
   * Disable PWA. Set to `true` to completely disable PWA, set to `false` to
   * generate Service Worker in both dev and prod.
   *
   * @default false
   */
  disable?: boolean;
  /**
   * Allow this plugin to automatically register Service Worker for you. Set
   * this to `false` when you want to handle register Service Worker yourself
   * (this can be done in `componentDidMount` of your root app). You can
   * consider
   * [register.js](https://github.com/DuCanhGH/next-pwa/blob/master/src/register.js)
   * an example.
   *
   * @default true
   */
  register?: boolean;
  /**
   * Set output directory for Service Worker. Relative to Next.js's root
   * directory. Defaults to `.next`.
   */
  dest?: string;
  /**
   * Service Worker script's filename. Defaults to `/sw.js`. Set to a string if
   * you want to customize the output filename.
   */
  sw?: string;
  /**
   * Service Worker's source file location. Relative to Next.js's root
   * directory. Provide this to enable InjectManifest. See more at [Google's
   * Workbox
   * documentation](https://developer.chrome.com/docs/workbox/reference/workbox-webpack-plugin/#type-InjectManifest).
   * If this is not specified then `GenerateSW` will be used to generate Service
   * Worker.
   */
  swSrc?: string;
  /**
   * Turn on caching for start URL. [Discussion of use cases for this
   * option](https://github.com/shadowwalker/next-pwa/pull/296#issuecomment-1094167025)
   */
  cacheStartUrl?: boolean;
  /**
   * If your start URL returns different HTML document under different states
   * (such as logged in vs. not logged in), this should be set to true.
   * Effective only when `cacheStartUrl` is set to `true`. Set to `false` if
   * your start URL always returns same HTML document, then start URL will be
   * precached and as such help speed up first load time.
   *
   * @default true
   */
  dynamicStartUrl?: boolean;
  /**
   * If your start URL redirect to another route such as `/login`, it's
   * recommended to setup this redirected URL for the best user experience.
   * Effective when `dynamicStartUrl` is set to `true`
   *
   * @default undefined
   */
  dynamicStartUrlRedirect?: string;
  publicExcludes?: string[];
  buildExcludes?: GenerateSWConfig["exclude"];
  /**
   * Config precached routes to fallback when both cache and network are not
   * available to serve resources. If you just need a offline fallback page,
   * simply create a `/_offline` page such as `pages/_offline.js` and you are
   * all set, no configuration necessary.
   *
   * - `fallbacks.document` - fallback route for document (page), defaults to
   *   `/_offline` if you have created that page.
   * - `fallbacks.image` - fallback route for images, defaults to none.
   * - `fallbacks.audio` - fallback route for audios, defaults to none.
   * - `fallbacks.video` - fallback route for videos, defaults to none.
   * - `fallbacks.font` - fallback route for fonts, defaults to none.
   */
  fallbacks?: Fallbacks;
  /**
   * Enable additional route caching when navigating through pages with
   * `next/link` in frontend. Check this
   * [example](https://github.com/DuCanhGH/next-pwa/tree/master/examples/cache-on-front-end-nav)
   * for some context on why this is implemented. This improves user experience
   * in some special cases but it also adds some overhead because of additional
   * network calls, and this can be considered a tradeoff.
   *
   * @default false
   */
  cacheOnFrontEndNav?: boolean;
  /**
   * URL scope for PWA. Defaults to `basePath` in `next.config.js`. Set to
   * `/foo` so that paths under `/foo` are PWA while others are not
   */
  scope?: string;
  /**
   * Customize the directory `next-pwa` use to look for a custom worker
   * implementation to add to the Service Worker generated by Workbox. For more
   * information, check out the [custom worker
   * example](https://github.com/DuCanhGH/next-pwa/tree/master/examples/custom-ts-worker).
   * The plugin will look into root and `src` directory for this directory.
   * Relative to Next.js's root directory. Defaults to `worker`.
   */
  customWorkerDir?: string;
  /**
   * Reload the app when it detects that it has gone back online. Indicate if
   * the app should call `location.reload()` to refresh the app.
   *
   * @default true
   */
  reloadOnOnline?: boolean;
  /**
   * URL prefix to allow hosting static files on a subdomain. Defaults to root
   * URL. For example, use `/subdomain` if the app is hosted on
   * `https://www.example.com/subdomain`.
   *
   * @deprecated Use `basePath` in `next.config.js` instead.
   */
  subdomainPrefix?: string;
}

export interface Fallbacks {
  document?: string;
  data?: string;
  image?: string;
  audio?: string;
  video?: string;
  font?: string;
}
